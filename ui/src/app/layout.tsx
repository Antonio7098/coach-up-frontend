import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from "@clerk/nextjs";
import "./globals.css";
import "../styles/theme.css";
import { ChatProvider } from "../context/ChatContext";
import { MicProvider } from "../context/MicContext";
import { AudioProvider } from "../context/AudioContext";
import { VoiceProvider } from "../context/VoiceContext";
import { ConversationProvider } from "../context/ConversationContext";
import GlobalMicButton from "../components/GlobalMicButton";
import NavDirListener from "./NavDirListener";
import { MicUIProvider } from "../context/MicUIContext";
import ConvexClientProvider from "./ConvexClientProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const publishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
  const signInUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || "/sign-in";
  const signInFallbackRedirectUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL || "/";
  const signUpFallbackRedirectUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL || "/";
  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={signInUrl}
      signInFallbackRedirectUrl={signInFallbackRedirectUrl}
      signUpFallbackRedirectUrl={signUpFallbackRedirectUrl}
    >
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >

          <ConvexClientProvider>
            <ChatProvider>
              <VoiceProvider>
                <AudioProvider>
                  <ConversationProvider>
                    <MicProvider>
                      <MicUIProvider>
                        {/* Global listener to mark popstate as 'back' for entry animations */}
                        <NavDirListener />
                        {children}
                        {/* Global mic renders coach-style UI when inCoach via MicUIContext */}
                        <GlobalMicButton />
                      </MicUIProvider>
                    </MicProvider>
                  </ConversationProvider>
                </AudioProvider>
              </VoiceProvider>
            </ChatProvider>
          </ConvexClientProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}
