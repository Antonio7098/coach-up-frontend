import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from "@clerk/nextjs";
import "./globals.css";
import "../styles/theme.css";
import { ChatProvider } from "../context/ChatContext";
import { MicProvider } from "../context/MicContext";
import { AudioProvider } from "../context/AudioContext";
import { VoiceProvider } from "../context/VoiceContext";
import { ConversationProvider } from "../context/ConversationContext";
import GlobalMicGate from "../components/GlobalMicGate";
import NavDirListener from "./NavDirListener";
import { MicUIProvider } from "../context/MicUIContext";
import ConvexClientProvider from "./ConvexClientProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const publishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
  const signInUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || "/sign-in";
  const signInFallbackRedirectUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL || "/";
  const signUpFallbackRedirectUrl = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL || "/";
  return (
    <ClerkProvider
      publishableKey={publishableKey}
      signInUrl={signInUrl}
      signInFallbackRedirectUrl={signInFallbackRedirectUrl}
      signUpFallbackRedirectUrl={signUpFallbackRedirectUrl}
    >
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >

          <SignedIn>
            <ConvexClientProvider>
              <ChatProvider>
                <VoiceProvider>
                  <AudioProvider>
                    <ConversationProvider>
                      <MicProvider>
                        <MicUIProvider>
                          {/* Global listener to mark popstate as 'back' for entry animations */}
                          <NavDirListener />
                          {children}
                          {/* Hide global mic on /coach-min to avoid confusion */}
                          <GlobalMicGate />
                        </MicUIProvider>
                      </MicProvider>
                    </ConversationProvider>
                  </AudioProvider>
                </VoiceProvider>
              </ChatProvider>
            </ConvexClientProvider>
          </SignedIn>

          <SignedOut>
            <div className="min-h-screen flex items-center justify-center bg-background">
              <div className="max-w-md w-full space-y-8 p-8">
                <div className="text-center">
                  <h1 className="text-3xl font-bold text-foreground">Welcome to CoachUp</h1>
                  <p className="mt-2 text-muted-foreground">
                    Sign in to access your AI-powered speech coaching platform
                  </p>
                </div>
                <div className="space-y-4">
                  <SignInButton mode="modal">
                    <button className="w-full bg-primary text-primary-foreground py-3 px-4 rounded-lg font-medium hover:bg-primary/90 transition-colors">
                      Sign In
                    </button>
                  </SignInButton>
                  <SignUpButton mode="modal">
                    <button className="w-full bg-secondary text-secondary-foreground py-3 px-4 rounded-lg font-medium hover:bg-secondary/90 transition-colors">
                      Sign Up
                    </button>
                  </SignUpButton>
                </div>
              </div>
            </div>
          </SignedOut>
        </body>
      </html>
    </ClerkProvider>
  );
}
